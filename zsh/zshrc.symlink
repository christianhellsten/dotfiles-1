# ========================
# Zsh Configuration File
# ========================

# NOTE: Uncommenting the following line will cause zsh to exit immediately if any command exits with a non-zero status.
# Use with caution in interactive shells.
# set -e

export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=247'

# Tell fzf to use ripgrep and respect .gitignore
export FZF_DEFAULT_COMMAND='rg --files --ignore --hidden --follow --glob "!.git/*"'
# export FZF_CTRL_T_COMMAND='fd --type f --hidden --follow --exclude .git'
# export FZF_ALT_C_COMMAND='fd --type d --hidden --exclude .git'

# History settings
setopt hist_ignore_space         # Ignore commands that start with a space.
setopt hist_ignore_dups          # Ignore duplicate commands in the history.
setopt hist_ignore_all_dups      # Remove all previous lines matching the current line from the history.
setopt hist_reduce_blanks        # Remove superfluous blanks before storing a command in the history.

# nvim
export EDITOR='nvim'

# Locale settings
export LC_ALL=en_US.UTF-8        # Set locale settings to ensure consistent behavior across different programs.

# Fix "Inappropriate ioctl for device"
export GPG_TTY=$(tty)            # Set GPG_TTY to the current terminal to fix issues with GPG.

# Custom environment variable, possibly used by specific plugins or scripts.
export DISABLE_MAGIC_FUNCTIONS=true

# Uncomment and add plugins if needed
# plugins=(... dotenv)

# Dotfiles path
export ZSH=$HOME/.dotfiles       # Set the ZSH environment variable to the path of the dotfiles directory.

# Projects path for quick navigation
export PROJECTS=~/projects       # Set the PROJECTS environment variable to the path of your projects directory.

# Source .localrc if it exists for sensitive configuration.
if [[ -a ~/.localrc ]]; then
  source ~/.localrc
fi

# Collect all .zsh files in the .dotfiles directory.
typeset -U config_files
config_files=($ZSH/**/*.zsh)

# Load the path files
for file in ${(M)config_files:#*/path.zsh}; do
  source $file
done

# Load all .zsh files except path.zsh and completion.zsh.
for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}; do
  source $file
done

# Initialize the completion system.
autoload -U compinit
compinit

# Load every completion file after autocomplete loads.
for file in ${(M)config_files:#*/completion.zsh}; do
  source $file
done

# Clean up the environment by unsetting config_files.
unset config_files

# System limits
ulimit -Sn 4096                  # Increase the limit for the number of open files.
ulimit -Sl unlimited             # Set the limit for locked memory to unlimited.

# Merge tool for THOR
export THOR_MERGE=vimdiff

# Add various paths to the PATH environment variable.
export PATH="/opt/homebrew/bin:$PATH"
export PATH="$HOME/.yarn/bin:$PATH"
export PATH="/usr/local/opt/node@14/bin:$PATH"
export PATH="~/bin:~/go/bin:$PATH"
export PATH="~/.pyenv/shims/:~/bin:$PATH"

# export PATH="$HOME/.jenv/bin:$PATH"

# Add zsh completions to function path.
fpath=(/usr/local/share/zsh-completions $fpath)

# Source fzf.zsh if it exists.
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Source iTerm2 shell integration script if it exists.
test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

# Set the mark-modified-lines option off.
set mark-modified-lines Off

#
# ZPLUG
#
# Plugins
export ZPLUG_HOME=/opt/homebrew/opt/zplug
source $ZPLUG_HOME/init.zsh
zplug "woefe/wbase.zsh"
zplug "woefe/git-prompt.zsh", use:"{git-prompt.zsh,examples/wprompt.zsh}"
zplug "junegunn/fzf", use:"shell/*.zsh"
# zplug "sharkdp/fd", from:gh-r, as:command, use:fd, rename-to:fd
zplug "docker/cli", use:contrib/completion/zsh, defer:3
zplug "docker/compose", use:contrib/completion/zsh, defer:3
zplug "zsh-users/zsh-completions"
zplug "zsh-users/zsh-autosuggestions"
zplug "zsh-users/zsh-syntax-highlighting", defer:2
zplug "zsh-users/zsh-history-substring-search", defer:3

# Check if all plugins were successfully loaded
if ! zplug check --verbose; then
  zplug install
fi

# zplug load --verbose
zplug load

#
# ZPLUG END
#

# Initialize various tools and plugins.
# eval "$(starship init zsh)"      # Initialize Starship prompt.
eval "$(rbenv init -)"           # Initialize rbenv.
eval "$(pyenv init -)"           # Initialize pyenv.
eval "$(direnv hook zsh)"        # Initialize direnv.
# eval "$(jenv init -)"

#
# Bind TAB, instead of CTLR+E, to autosuggest-accept from zsh-users/zsh-autosuggestions
#
# bindkey '^I' autosuggest-accept


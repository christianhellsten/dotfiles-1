""""""""""""""""""""""""""""
" # Tips
"
" ## Code completion shortcuts
"
" ctrl+x+p
" ctrl+n
"
" ## File opener
"
" ctrl+p Open file
" ctrl+d Toggle between full-path search and filename only search.
" ctrl+r Toggle between the string mode and full regexp mode.
"
"
set nocompatible
filetype off

set rtp+=~/.vim/bundle/vundle/

call vundle#begin()

" Vundles
Plugin 'gmarik/vundle'
Plugin 'bronson/vim-trailing-whitespace' " Highlight trailing whitespace
" Plugin 'Valloric/YouCompleteMe' " Code completion. Not working.
Plugin 'tpope/vim-endwise' " Add 'end' automatically to Ruby code
Plugin 'vim-ruby/vim-ruby' " Ruby syntax highlighting, smart indenting, autocompletion, compiling
Plugin 'scrooloose/nerdcommenter' " Easy commenting
Plugin 'docunext/closetag.vim' " Close HTML and XML tags
Plugin 'tpope/vim-sensible' " Sensible defaults for Vim
"Plugin 'tpope/vim-surround' " Surround text. Doesn't work with ctrlp.
Plugin 'tpope/vim-fugitive' " Git integration
Plugin 'scrooloose/nerdtree' " File browser
"Plugin 'tpope/vim-haml' " HAML & Sass
Plugin 'rking/ag.vim' " Silver searcher integration
Plugin 'nanotech/jellybeans.vim' " Theme
Plugin 'lsdr/monokai' " Sublimetext's theme
"Plugin 'Lokaltog/vim-powerline' " Statusline, but no tab styling
Plugin 'bling/vim-airline' " status and tab styling
"Plugin 'scrooloose/syntastic' " Syntax highlighting (slow bastard)
Plugin 'kien/ctrlp.vim' " File opener
Plugin 'fatih/vim-go' " Go syntax
"Plugin 'elixir-lang/vim-elixir' " Elixir syntax
Plugin 'mxw/vim-jsx' " JSX syntax
Plugin 'slim-template/vim-slim' " Vim syntax
Plugin 'leafgarland/typescript-vim' " typescript syntax
Plugin 'kchmck/vim-coffee-script' " Coffeescript syntax
"Plugin 'mustache/vim-mustache-handlebars' " Handlebars and mustaches

" Snipmate
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'garbas/vim-snipmate'
Plugin 'honza/vim-snippets'

call vundle#end() " required

filetype plugin indent on

let mapleader=","

""""""""""""""""""""""""""""

color jellybeans
"colorscheme molokai
"colorscheme vibrantink

" Configure tabs and spaces
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab

" Persistent undo will save us one day...
set undofile
set undodir=~/.vim/undo/ " NOTE: this directory MUST exist
set undolevels=1000  " number of changes that can be undone
set undoreload=10000 " number of lines to save

" Highlight search results
highlight OverLength ctermbg=red ctermfg=white guibg=#592929
match OverLength /\%81v.\+/

" Configure ctrl-p
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/log/*,*/vendor/bundle/*,*/node_modules/*,*/bower_components/*,*/build/*,*/tmp/*,*/doc/*,*/target/*
let g:ctrlp_working_path_mode = 0
let g:ctrlp_max_height = 30

" Remove ugly buffer divider
:set fillchars+=vert:\ 

" Highlight search matches
set hlsearch

syntax on             " Enable syntax highlighting
filetype on           " Enable filetype detection
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins


" Don't get stuck while scrolling
set scrolloff=6

" Faster tab switching
"
" Tips:
"
"   :tabe index.html
"
nnoremap tn :tabnew<CR>
nnoremap td :tabclose<CR>
" Next tab
nnoremap <Tab> gt
" Previous tab
nnoremap <S-Tab> gT
" Go to tab by number
noremap <leader>1 1gt
noremap <leader>2 2gt
noremap <leader>3 3gt
noremap <leader>4 4gt
noremap <leader>5 5gt
noremap <leader>6 6gt
noremap <leader>7 7gt
noremap <leader>8 8gt
noremap <leader>9 9gt
noremap <leader>0 :tablast<cr>
nnoremap <D-f> :Ag
" NERDTree = ctrl-n
nnoremap <silent> <C-n> :NERDTreeToggle<CR>

" Show 'weird' characters, e.g. encoded space
set list

" Mouse can interact with tabs, etc
"set mouse=a

" Allow switching away from unsaved buffer
set hidden

" No more .swp crap
set backupdir=/tmp

" Set tab to do omnicompletion.
" NOTE: Conflicts with snipmate. Do <ctrl-p> instead.
"function! InsertTabWrapper()
    "let col = col('.') - 1
    "if !col || getline('.')[col - 1] !~ '\k'
        "return "\<tab>"
    "else
        "return "\<c-p>"
    "endif
"endfunction

"inoremap <tab> <c-r>=InsertTabWrapper()<cr>

" Enable automatic code folding for Ruby
" NOTE: looks ugly.
"autocmd FileType ruby,eruby
      "\ set foldmethod=expr |
      "\ set foldexpr=getline(v:lnum)=~'^\\s*#'

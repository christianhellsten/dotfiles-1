""""""""""""""""""""""""""""
" # Tips
"
" ## Code completion shortcuts
"
" ctrl+x+p
" ctrl+n
"
" ## File opener
"
" ctrl+p Open file
"
"
set nocompatible
syntax on
filetype off
" show line numbers
set nu
" no new line at end-of-file!
set noeol

" Force vim to use python3
if has('python3')
endif
let g:python2_host_prog = '/usr/local/bin/python'
let g:python3_host_prog = '/usr/local/bin/python3'
" Fix Python files with autopep8 and yapf.
let b:ale_fixers = ['autopep8', 'yapf']
" Check Python files with flake8 and pylint.
let b:ale_linters = ['flake8', 'pylint']
" CSV plugin does not work
let g:polyglot_disabled = ['csv']

" Fix airline-vim performance issues
set fillchars=diff:Â·

" NOTE: stupid rule:
" Remind me to use jk instead of ESC
"inoremap  :echoe "use jk"
"inoremap <esc> <nop>
"inoremap jk <esc>

call plug#begin('~/.vim/plugged')

" Macvim+fzf requires:
" $ brew install fzf
Plug '/usr/local/opt/fzf' | Plug 'junegunn/fzf.vim'
nnoremap <c-p> :FZF<cr>
Plug 'janko-m/vim-test' " Run your tests at the speed of thought - GitHub
nnoremap t<c-n> :TestNearest<cr>
nnoremap t<c-l> :TestLast<cr>
nnoremap t<c-f> :TestFile<cr>

Plug 'nvim-lua/plenary.nvim' " All the lua functions I don't want to write twice
Plug 'kyazdani42/nvim-web-devicons'
Plug 'folke/trouble.nvim' " Show me troubles
Plug 'jose-elias-alvarez/null-ls.nvim' " vale for writers
Plug 'jceb/vim-orgmode'
Plug 'pearofducks/ansible-vim'
Plug 'bronson/vim-trailing-whitespace' " Highlight trailing whitespace
Plug 'scrooloose/nerdcommenter' " Easy commenting
Plug 'tpope/vim-sensible' " Sensible defaults for Vim
Plug 'tpope/vim-fugitive' " Git integration
Plug 'rking/ag.vim' " Silver searcher integration
Plug 'nanotech/jellybeans.vim' " Theme
Plug 'morhetz/gruvbox' "Theme
Plug 'lsdr/monokai' " Sublimetext's theme
Plug 'vim-airline/vim-airline' " status bar
Plug 'vim-airline/vim-airline-themes' " status and tab styling
Plug 'dense-analysis/ale' " Asynchronous Lint Engine
Plug 'vim-ruby/vim-ruby' " Ruby syntax highlighting, smart indenting, autocompletion, compiling
Plug 'neoclide/coc.nvim', {'branch': 'release'} " Make your Vim/Neovim as smart as VSCode
Plug 'fatih/vim-go' " Go syntax
Plug 'tpope/vim-endwise' " Add 'end' automatically to Ruby code
Plug 'sheerun/vim-polyglot' " A collection of language packs for Vim.
Plug 'posva/vim-vue' " Vue.js
Plug 'leafgarland/typescript-vim' " TypeScript

" Disabled plugins
"Plug 'vim-scripts/SQLUtilities' # Does not do what it says
"Plug 'Valloric/YouCompleteMe' " Code completion. Not working.
"Plug 'docunext/closetag.vim' " Close HTML and XML tags
"Plug 'tpope/vim-surround' " Surround text. Doesn't work with ctrlp.
"Plug 'scrooloose/nerdtree' " File browser
"Plug 'tpope/vim-haml' " HAML & Sass
"Plug 'scrooloose/syntastic' " Syntax highlighting (slow bastard)
"Plug 'rhysd/vim-crystal' " Crystal syntax highlighting
"Plug 'kien/ctrlp.vim' " File opener
"Plug 'elixir-lang/vim-elixir' " Elixir syntax
"Plug 'mxw/vim-jsx' " JSX syntax
"Plug 'slim-template/vim-slim' " Vim syntax
"Plug 'leafgarland/typescript-vim' " typescript syntax
"Plug 'kchmck/vim-coffee-script' " Coffeescript syntax


"Plug 'mustache/vim-mustache-handlebars' " Handlebars and mustaches

" Snipmate
"Plug 'MarcWeber/vim-addon-mw-utils'
"Plug 'tomtom/tlib_vim'
"Plug 'garbas/vim-snipmate'
"Plug 'honza/vim-snippets'

call plug#end()


filetype plugin indent on

let mapleader=","

""""""""""""""""""""""""""""

set termguicolors " true color support required by e.g. gruvbox

colorscheme gruvbox
set background=dark    " Use dark gruvbox mode
"colorscheme jellybeans
"colorscheme molokai
"colorscheme vibrantink

" Persistent undo will save us one day...
set undofile
set undodir=~/.vim/undo/ " NOTE: this directory MUST exist
set undolevels=1000  " number of changes that can be undone
set undoreload=10000 " number of lines to save

" Highlight search results
highlight OverLength ctermbg=red ctermfg=white guibg=#592929
match OverLength /\%81v.\+/

" Configure ctrl-p
set wildignore+=*/deps/*,*/priv/*,*/tmp/*,*.so,*.swp,*.zip,*/log/*,*/vendor/bundle/*,*/node_modules/*,*/bower_components/*,*/build/*,*/tmp/*,*/doc/*,*/target/*
"let g:ctrlp_working_path_mode = 0
"let g:ctrlp_max_height = 30

" Remove ugly buffer divider
:set fillchars+=vert:\ 

" Highlight search matches
set hlsearch

syntax on             " Enable syntax highlighting
filetype on           " Enable filetype detection
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins


" Don't get stuck while scrolling
set scrolloff=6

" Faster tab switching
"
" Tips:
"
"   :tabe index.html
"
nnoremap tn :tabnew<CR>
nnoremap td :tabclose<CR>
" Next tab
nnoremap <Tab> gt
" Previous tab
nnoremap <S-Tab> gT
" Go to tab by number
"noremap <leader>1 1gt
"noremap <leader>2 2gt
"noremap <leader>3 3gt
"noremap <leader>4 4gt
"noremap <leader>5 5gt
"noremap <leader>6 6gt
"noremap <leader>7 7gt
"noremap <leader>8 8gt
"noremap <leader>9 9gt
"noremap <leader>0 :tablast<cr>
nnoremap <D-f> :Ag
" NERDTree = ctrl-n
"nnoremap <silent> <C-n> :NERDTreeToggle<CR>

" Show 'weird' characters, e.g. encoded space
set list

" Mouse can interact with tabs, etc
"set mouse=a

" Allow switching away from unsaved buffer
set hidden

" No more .swp crap
set backupdir=/tmp

" Set tab to do omnicompletion.
" NOTE: Conflicts with snipmate. Do <ctrl-p> instead.
"function! InsertTabWrapper()
    "let col = col('.') - 1
    "if !col || getline('.')[col - 1] !~ '\k'
        "return "\<tab>"
    "else
        "return "\<c-p>"
    "endif
"endfunction

"inoremap <tab> <c-r>=InsertTabWrapper()<cr>

" Enable automatic code folding for Ruby
" NOTE: looks ugly.
"autocmd FileType ruby,eruby
      "\ set foldmethod=expr |
      "\ set foldexpr=getline(v:lnum)=~'^\\s*#'
      "
      "


"
" Requires xmllint CLI
"
function! DoPrettyXML()
  " save the filetype so we can restore it later
  let l:origft = &ft
  set ft=
  " delete the xml header if it exists. This will
  " permit us to surround the document with fake tags
  " without creating invalid xml.
  1s/<?xml .*?>//e
  " insert fake tags around the entire document.
  " This will permit us to pretty-format excerpts of
  " XML that may contain multiple top-level elements.
  0put ='<PrettyXML>'
  $put ='</PrettyXML>'
  silent %!xmllint --format -
  " xmllint will insert an <?xml?> header. it's easy enough to delete
  " if you don't want it.
  " delete the fake tags
  2d
  $d
  " restore the 'normal' indentation, which is one extra level
  " too deep due to the extra tags we wrapped around the document.
  silent %<
  " back to home
  1
  " restore the filetype
  exe "set ft=" . l:origft
endfunction
command! PrettyXML call DoPrettyXML()

"
" Requires node CLI
"
function DoPrettyJSON(...)
  let code="\"
        \ var i = process.stdin, d = '';
        \ i.resume();
        \ i.setEncoding('utf8');
        \ i.on('data', function(data) { d += data; });
        \ i.on('end', function() {
        \     console.log(JSON.stringify(JSON.parse(d), null,
        \ " . (a:0 ? a:1 ? a:1 : 2 : 2) . "));
        \ });\""
  execute "%! node -e " . code
endfunction
command! PrettyJSON call DoPrettyJSON()

"
" Copy to OSX clipboard when yanking
"
set clipboard=unnamed

" Configure tabs and spaces
" http://stackoverflow.com/questions/8903103/how-can-i-find-out-why-vim-keeps-changing-my-expandtab-setting
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab

"
" Tabs to spaces etc, LOL.
"
"autocmd Filetype html setlocal ts=2 sw=2 expandtab
"autocmd Filetype ruby setlocal ts=2 sw=2 expandtab
"autocmd Filetype javascript setlocal ts=4 sw=4 sts=0 noexpandtab
"
"
"

lua << EOF
  require("trouble").setup {
    -- your configuration comes here
    -- or leave it empty to use the default settings
    -- refer to the configuration section below
  }
  require("null-ls").setup({
      sources = {
          require("null-ls").builtins.diagnostics.vale,
      },
  })
EOF
